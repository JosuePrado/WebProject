@page "/chat"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@rendermode InteractiveWebAssembly

<h3>Chat</h3>

@if (IsConnected)
{
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-info">@ErrorMessage</div>
    }

    <div class="form-field">
        <label>Message:</label>
        <div>
            <input type="text" @bind="messageInput" @oninput="OnTyping" />
            <button @onclick="Send" class="btn btn-primary">Send</button>
        </div>
    </div>
    

    <p>@typingNotification</p>

    <ul id="messagesList">
    @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
}
else
{
    <span>Connecting...</span>
}


@code {

    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string messageInput;
    private string typingNotification;
    private int channel = 1;
    private bool userIsLogged;
    private string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<string>("ReceiveTypingNotification", (user) =>
        {
            typingNotification = $"{user} is typing...";
            StateHasChanged();

            Task.Delay(1000).ContinueWith(_ =>
    {
    typingNotification = string.Empty;
    InvokeAsync(StateHasChanged);
            });
        });

        await hubConnection.StartAsync();
    }

    private async Task<bool> isLogged() 
    {
        
        try
        {
            var response = await Http.GetAsync("http://localhost:5268/api/users/login");
            return response.IsSuccessStatusCode;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        return false;
    }

    private async Task Send() 
    {
        
        userIsLogged = await isLogged();
        if (userIsLogged)
        {
            await hubConnection.SendAsync("SendMessage", messageInput, channel);
        }
        else 
        {
            ErrorMessage = "Please, you must first log in";
        }
        
    } 
    Task OnTyping() => hubConnection.SendAsync("UserTyping");

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
}
